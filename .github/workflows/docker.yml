# Build & Publish GitHub Container Registry (GHCR) Images
name: Build Geant4 Images

on:
  push:
    branches: [ main ]   # publish on main updates
    tags: [ 'v*' ]       # also publish on version tags
  pull_request:          # PRs: build only (no push)

concurrency:
  group: ghcr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    name: Discover Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.scan.outputs.matrix }}
      image: ${{ steps.scan.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: scan
        name: Build matrix
        run: ci/distros_tags.sh

  build:
    name: Build ${{ matrix.geant4_tag }} on ${{ matrix.image }}:${{ matrix.image_tag }}
    needs: discover
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.discover.outputs.image }}
          tags: |
            # geant4-<tag>-<base>-<base_tag>
            type=raw,value=${{ format('{0}-{1}-{2}', matrix.geant4_tag, matrix.image, matrix.image_tag) }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=Geant4 image (${{ matrix.geant4_tag }} on ${{ matrix.image }}) ${{ matrix.image_tag }}


      # Generate a Dockerfile using your python script, passing the FULL base image
      - name: Generate Dockerfile
        run: |
          python3 ci/dockerfile_creator.py \
          -i "${{ matrix.image }}" \
          -t "${{ matrix.image_tag }}" \
          --root-version "${{ matrix.root_tag || '6.36.04' }}" \
          --meson-version "${{ matrix.meson_tag || '1.9.0' }}" \
          --novnc-version "${{ matrix.novnc_tag || 'v1.6.0' }}" \
          > Dockerfile.generated
          echo "Generated Dockerfile:"
          cat Dockerfile.generated

      - name: Choose platforms for this item
        id: plats
        shell: bash
        run: |
          PLATS="linux/amd64,linux/arm64"
          case "${{ matrix.image }}" in
            archlinux) PLATS="linux/amd64" ;;  # Arch image is amd64-only
          esac
          echo "plats=$PLATS" >> "$GITHUB_OUTPUT"

      - name: Get upstream commit
        run: echo "UPSTREAM_REV=$(git ls-remote https://github.com/gemc/g4install HEAD | cut -f1)" >> $GITHUB_ENV

      # Multi-arch when pushing; single-arch and load locally on PRs
      - name: Build and Push (release/merge)
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          build-args: |
            UPSTREAM_REV=${{ env.UPSTREAM_REV }}
          context: .
          file: ./Dockerfile.generated
          platforms: ${{ steps.plats.outputs.plats }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ needs.discover.outputs.image }}:cache
          cache-to: type=registry,ref=${{ needs.discover.outputs.image }}:cache,mode=max


      - name: Summarize image reference
        shell: bash
        env:
          IMAGE: ${{ needs.discover.outputs.image }}
          TAG: ${{ matrix.geant4_tag }}-${{ matrix.image }}-${{ matrix.image_tag }}
          PUSHED: ${{ github.event_name != 'pull_request' }}
        run: |
          # prepare summary target safely
          if [ -n "${GITHUB_STEP_SUMMARY:-}" ]; then
            SUMMARY_OUT="$GITHUB_STEP_SUMMARY"
          else
            SUMMARY_OUT="$RUNNER_TEMP/step_summary.md"
            mkdir -p "$(dirname "$SUMMARY_OUT")"
            echo "GITHUB_STEP_SUMMARY not set; writing to $SUMMARY_OUT"
          fi
          
          {
            echo ""
            echo ""
            echo "## **Tag:** \`${IMAGE}:${TAG}\`"
            echo ""
            echo ""
            echo "For MacOS silicon hosts set this up first:"
            echo '```bash'
            echo "export PLATFORM=\"--platform=linux/amd64\""
            echo '```'
            echo ""

            echo ""
            echo "### Pull"
            echo '```bash'
            echo "docker pull \$PLATFORM ${IMAGE}:${TAG}"
            echo '```'
          
            echo ""
            echo "### Run interactive shell"
            echo '```bash'
            echo "docker run --rm -it \$PLATFORM ${IMAGE}:${TAG} bash -l"
            echo '```'
          
            echo ""
            echo "### Run using VNC or noVNC in a browser:"
            echo "_VNC viewer → localhost:5900 (password: change-me)_"
            echo "_noVNC web client at http://localhost:6080/vnc.html (password: change-me)_"
            echo '```bash'
            echo "docker run --rm -it \$PLATFORM -p 6080:6080 -p 5900:5900 -e VNC_BIND=0.0.0.0 -e X11VNC_PASSWORD='change-me' ${IMAGE}:${TAG}"
            echo '```'
          
          } >> "$SUMMARY_OUT"
          
          echo "Summary written to: $SUMMARY_OUT"

      - name: Upload per-job summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.image }}-${{ matrix.image_tag }}
          path: ${{ runner.temp }}/summary-${{ matrix.image }}-${{ matrix.image_tag }}.md
          if-no-files-found: error

  # Final aggregator job
  workflow-summary:
    name: Workflow summary
    runs-on: ubuntu-latest
    needs: [build]      # add all other job ids here, or: needs: [discover, build, test, ...]
    if: ${{ always() }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: summary-*
          merge-multiple: true

      - name: Build consolidated summary
        shell: bash
        run: |
          : "${GITHUB_STEP_SUMMARY:=$RUNNER_TEMP/summary.md}"
          {
            echo "# GEMC Geant4 Images — Run $GITHUB_RUN_NUMBER"
            echo ""
            echo "**Commit:** \`$GITHUB_SHA\`  |  **Event:** \`${GITHUB_EVENT_NAME}\`  |  **Actor:** \`${GITHUB_ACTOR}\`"
            echo ""
            echo "Below are the per-image snippets from all jobs:"
            echo ""
            for f in summary-*.md; do
              [ -f "$f" ] || continue
              echo "<details><summary>${f}</summary>"
              echo ""
              cat "$f"
              echo ""
              echo "</details>"
              echo ""
            done
          } >> "$GITHUB_STEP_SUMMARY"